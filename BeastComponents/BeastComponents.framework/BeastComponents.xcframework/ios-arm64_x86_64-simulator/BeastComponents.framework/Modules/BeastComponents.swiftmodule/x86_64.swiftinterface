// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BeastComponents
@_exported import BeastComponents
import Foundation
import Swift
import UIKit
@objc public protocol BCCoverFlowViewDataSource : AnyObject {
  @objc func numberOfCovers(in coverFlowView: BeastComponents.BCCoverFlowView) -> Swift.Int
  @objc func coverFlowView(_ coverFlowView: BeastComponents.BCCoverFlowView, contentAt index: Swift.Int) -> BeastComponents.BCCoverContentView
}
@objc @_inheritsConvenienceInitializers public class BCBubbleCellView : UIKit.UIView {
  public var style: BeastComponents.BCBubbleCellStyle {
    get
    set
  }
  @objc public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var weight: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var detailText: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public let backgroundImageView: UIKit.UIImageView
  @objc public var titleLabel: UIKit.UILabel? {
    get
  }
  @objc public var weightLabel: UIKit.UILabel? {
    get
  }
  @objc public var detailTextLabel: UIKit.UILabel? {
    get
  }
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public var collisionBoundsType: UIKit.UIDynamicItemCollisionBoundsType {
    @objc get
  }
  @objc override dynamic public var collisionBoundingPath: UIKit.UIBezierPath {
    @objc get
  }
  public var weightLabelTextFormat: BeastComponents.BCBubbleCellWeightLabelTextFormat {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct BCBubbleCellStyle {
  public static let noLabel: BeastComponents.BCBubbleCellStyle
  public static let onlyTitleLabel: BeastComponents.BCBubbleCellStyle
  public static let onlyWeightLabel: BeastComponents.BCBubbleCellStyle
  public static let titleAndWeightLabel: BeastComponents.BCBubbleCellStyle
  public static let titleAndDetailLabel: BeastComponents.BCBubbleCellStyle
  public static let weightAndDetailLabel: BeastComponents.BCBubbleCellStyle
  public static let titleAndWeightAndDetailLabel: BeastComponents.BCBubbleCellStyle
  public var hasTitleLabel: Swift.Bool {
    get
  }
  public var hasWeightLabel: Swift.Bool {
    get
  }
  public var hasDetailLabel: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BCCoverFlowView : UIKit.UIScrollView, UIKit.UIScrollViewDelegate {
  @objc weak public var dataSource: BeastComponents.BCCoverFlowViewDataSource?
  @objc override weak dynamic public var delegate: UIKit.UIScrollViewDelegate? {
    @objc get
    @objc set
  }
  public var coverFlowStyle: BeastComponents.BCCoverFlowStyle {
    get
    set
  }
  @objc public var numberOfPresentingCovers: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var heightOfAreaBeyondTopCover: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc public var gradientColorForStream: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var heightOverPassed: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc public var isContinuousSideBySide: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var additionalCoverHeightForSideBySide: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc public var topCoverContentView: BeastComponents.BCCoverContentView? {
    @objc get
  }
  @objc public var presentDetailAnimationController: BeastComponents.BCCoverFlowViewPresentDetailAnimationController {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func register(nib coverNib: UIKit.UINib?, forCoverReuseIdentifier identifier: Swift.String)
  @objc public func register(class coverClass: Swift.AnyClass?, forCoverReuseIdentifier identifier: Swift.String)
  @objc public func dequeueReusableCoverContentView(withIdentifier identifier: Swift.String, for index: Swift.Int) -> BeastComponents.BCCoverContentView
  @objc public func coverContentView(for index: Swift.Int) -> BeastComponents.BCCoverContentView?
  @objc public func reloadData()
  @objc public func scrollToCoverContent(at index: Swift.Int, animated: Swift.Bool)
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public var contentOffset: CoreGraphics.CGPoint {
    @objc get
    @objc set
  }
  @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
  @objc public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
  public func deleteItem(at index: Swift.Int, with animation: BeastComponents.BCCoverFlowManageItemAnimation, completion: (() -> Swift.Void)?)
  @objc deinit
}
@objc public protocol BCBubbleContainerViewDelegate : AnyObject {
  @objc optional func bubbleContainerView(_ bubbleContainerView: BeastComponents.BCBubbleContainerView, didCreateBubbleCellView bubbleCellView: BeastComponents.BCBubbleCellView, forIndexAt index: Swift.Int)
}
public struct BCBubbleCellAppearance {
  public var backgroundColor: UIKit.UIColor
  public var bubbleBorderColor: UIKit.UIColor
  public var bubbleBorderWidth: CoreGraphics.CGFloat
  public var titleLabelTextColor: UIKit.UIColor
  public var weightLabelTextColor: UIKit.UIColor
  public var detailTextLabelTextColor: UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers public class BCBubbleContainerView : UIKit.UIView {
  public var cellStyle: BeastComponents.BCBubbleCellStyle {
    get
    set
  }
  @objc weak public var dataSource: BeastComponents.BCBubbleContainerViewDataSource?
  @objc weak public var delegate: BeastComponents.BCBubbleContainerViewDelegate?
  @objc public var minimumCellSize: CoreGraphics.CGFloat
  @objc public var maximumCellSize: CoreGraphics.CGFloat
  @objc public var cells: [BeastComponents.BCBubbleCellView] {
    get
  }
  public var cellAppearance: BeastComponents.BCBubbleCellAppearance {
    get
    set
  }
  public var cellWeightLabelTextFormat: BeastComponents.BCBubbleCellWeightLabelTextFormat {
    get
    set
  }
  @objc public func loadData(fromDataSource dataSource: BeastComponents.BCBubbleContainerViewDataSource?, andDelegate delegate: BeastComponents.BCBubbleContainerViewDelegate?)
  @objc public func reloadData()
  @objc public func redraw(changeCellStyle: Swift.Bool = false)
  @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BCProgressBar : UIKit.UIView {
  @objc public var progress: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var progressColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var maskBackgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var animationSpeed: Swift.Float
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func setProgress(_ progress: Swift.Float, animated: Swift.Bool)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc public protocol BCBubbleContainerViewDataSource : AnyObject {
  @objc func numberOfBubbles(in bubbleContainerView: BeastComponents.BCBubbleContainerView) -> Swift.Int
  @objc func bubbleContainerView(_ bubbleContainerView: BeastComponents.BCBubbleContainerView, weightForIndexAt index: Swift.Int) -> Swift.Double
  @objc optional func bubbleContainerView(_ bubbleContainerView: BeastComponents.BCBubbleContainerView, titleForIndexAt index: Swift.Int) -> Swift.String?
  @objc optional func bubbleContainerView(_ bubbleContainerView: BeastComponents.BCBubbleContainerView, detailTextForIndexAt index: Swift.Int) -> Swift.String?
  @objc optional func bubbleContainerView(_ bubbleContainerView: BeastComponents.BCBubbleContainerView, backgroundImageForIndexAt index: Swift.Int) -> UIKit.UIImage?
}
public enum BCCoverFlowManageItemAnimation {
  case none
  case left
  case right
  public static func == (a: BeastComponents.BCCoverFlowManageItemAnimation, b: BeastComponents.BCCoverFlowManageItemAnimation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public protocol BCCoverFlowViewDelegate : UIKit.UIScrollViewDelegate {
  @objc optional func coverFlowView(_ coverFlowView: BeastComponents.BCCoverFlowView, didUpdateTopCoverContentViewIndex index: Swift.Int, scrollScale scale: CoreGraphics.CGFloat)
  @objc optional func coverFlowView(_ coverFlowView: BeastComponents.BCCoverFlowView, didSelectCoverViewAtIndex index: Swift.Int)
}
public enum BCCoverFlowStyle {
  case top
  case bottom
  public static func == (a: BeastComponents.BCCoverFlowStyle, b: BeastComponents.BCCoverFlowStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BCRatingBar : UIKit.UIView {
  @objc public var numberOfStars: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var spaceBetweenStars: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc public var trackTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var ratingTintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc public var ratingBackgroundImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var internalRate: Swift.Float
  @objc public var rate: Swift.Float {
    @objc get
    @objc set
  }
  @objc public func setRate(_ rate: Swift.Float, animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BCArrowAlertView : UIKit.UILabel {
  @objc public var arrowHeadDepth: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var animationSpeed: Swift.Float
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class BCCoverFlowViewPresentDetailAnimationController : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @objc public var customizedAnimation: ((Swift.Bool) -> Swift.Void)?
  @objc public var zoomIn: BeastComponents.BCCoverFlowViewPresentDetailAnimationController {
    @objc get
  }
  @objc public var zoomOut: BeastComponents.BCCoverFlowViewPresentDetailAnimationController {
    @objc get
  }
  @objc public var zoomInAndFlipRight: BeastComponents.BCCoverFlowViewPresentDetailAnimationController {
    @objc get
  }
  @objc public var zoomOutAndFlipLeft: BeastComponents.BCCoverFlowViewPresentDetailAnimationController {
    @objc get
  }
  @objc public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc public func animateZoomInTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc public func animateZoomOutTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc public func animateZoomAndFlipTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc override dynamic public init()
  @objc deinit
}
public enum BCBubbleCellWeightLabelTextFormatType {
  case percentage
  case useStringFormat
  public static func == (a: BeastComponents.BCBubbleCellWeightLabelTextFormatType, b: BeastComponents.BCBubbleCellWeightLabelTextFormatType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct BCBubbleCellWeightLabelTextFormat {
  public var type: BeastComponents.BCBubbleCellWeightLabelTextFormatType
  public var stringFormat: Swift.String
}
@objc open class BCCoverContentView : UIKit.UIView {
  @objc required public init(reuseIdentifier: Swift.String)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc open func prepareForReuse()
  @objc public var reuseIdentifier: Swift.String? {
    get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension BeastComponents.BCCoverFlowManageItemAnimation : Swift.Equatable {}
extension BeastComponents.BCCoverFlowManageItemAnimation : Swift.Hashable {}
extension BeastComponents.BCCoverFlowStyle : Swift.Equatable {}
extension BeastComponents.BCCoverFlowStyle : Swift.Hashable {}
extension BeastComponents.BCBubbleCellWeightLabelTextFormatType : Swift.Equatable {}
extension BeastComponents.BCBubbleCellWeightLabelTextFormatType : Swift.Hashable {}
